type Archive = record { canister_id : principal };
type Archives = record { archives : vec Archive };
type Block = record {
  transaction : Transaction;
  timestamp : TimeStamp;
  parent_hash : opt vec nat8;
};
type BlockRange = record { blocks : vec Block };
type GetBlocksArgs = record { start : nat64; length : nat64 };
type ICRC1Account = record { owner : principal; subaccount : opt vec nat8 };
type ICRC1TransferError = variant {
  GenericError : _InlineICRC1TransferErrorGenericError;
  TemporarilyUnavailable;
  BadBurn : _InlineICRC1TransferErrorBadBurn;
  Duplicate : _InlineICRC1TransferErrorDuplicate;
  BadFee : _InlineICRC1TransferErrorBadFee;
  CreatedInFuture : _InlineICRC1TransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineICRC1TransferErrorInsufficientFunds;
};
type ManualReply = variant { Ok : nat; Err : ICRC1TransferError };
type ManualReply_1 = variant { Ok : TransferResult; Err : text };
type ManualReply_2 = variant { Ok : Tokens; Err : text };
type ManualReply_3 = variant { Ok : Archives; Err : text };
type ManualReply_4 = variant { Ok : QueryBlocksResponse; Err : text };
type ManualReply_5 = variant { Ok : nat32; Err : text };
type ManualReply_6 = variant { Ok : text; Err : text };
type ManualReply_7 = variant { Ok : TransferFee; Err : text };
type Operation = variant {
  Burn : _InlineOperationBurn;
  Mint : _InlineOperationMint;
  Transfer : _InlineOperationTransfer;
};
type QueryArchiveError = variant {
  BadFirstBlockIndex : _InlineQueryArchiveErrorBadFirstBlockIndex;
  Other : _InlineQueryArchiveErrorOther;
};
type QueryArchiveResult = variant { Ok : BlockRange; Err : QueryArchiveError };
type QueryBlocksResponse = record {
  certificate : opt vec nat8;
  blocks : vec Block;
  chain_length : nat64;
  first_block_index : nat64;
  archived_blocks : vec _InlineQueryBlocksResponseArchivedBlocks;
};
type TimeStamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type Transaction = record {
  memo : nat64;
  operation : opt Operation;
  created_at_time : TimeStamp;
};
type TransferError = variant {
  TxTooOld : _InlineTransferErrorTxTooOld;
  BadFee : _InlineTransferErrorBadFee;
  TxDuplicate : _InlineTransferErrorTxDuplicate;
  TxCreatedInFuture;
  InsufficientFunds : _InlineTransferErrorInsufficientFunds;
};
type TransferFee = record { transfer_fee : Tokens };
type TransferResult = variant { Ok : nat64; Err : TransferError };
type _InlineICRC1TransferErrorBadBurn = record { min_burn_amount : nat };
type _InlineICRC1TransferErrorBadFee = record { expected_fee : nat };
type _InlineICRC1TransferErrorCreatedInFuture = record { ledger_time : nat64 };
type _InlineICRC1TransferErrorDuplicate = record { duplicate_of : nat };
type _InlineICRC1TransferErrorGenericError = record {
  message : text;
  error_code : nat;
};
type _InlineICRC1TransferErrorInsufficientFunds = record { balance : nat };
type _InlineOperationBurn = record { from : vec nat8; amount : Tokens };
type _InlineOperationMint = record { to : vec nat8; amount : Tokens };
type _InlineOperationTransfer = record {
  to : vec nat8;
  fee : Tokens;
  from : vec nat8;
  amount : Tokens;
};
type _InlineQueryArchiveErrorBadFirstBlockIndex = record {
  requested_index : nat64;
  first_valid_index : nat64;
};
type _InlineQueryArchiveErrorOther = record {
  error_message : text;
  error_code : nat64;
};
type _InlineQueryBlocksResponseArchivedBlocks = record {
  callback : func (GetBlocksArgs) -> (QueryArchiveResult) query;
  start : nat64;
  length : nat64;
};
type _InlineTransferErrorBadFee = record { expected_fee : Tokens };
type _InlineTransferErrorInsufficientFunds = record { balance : Tokens };
type _InlineTransferErrorTxDuplicate = record { duplicate_of : nat64 };
type _InlineTransferErrorTxTooOld = record { allowed_window_nanos : nat64 };
service : (text) -> {
  ckbtc_balance_of : (ICRC1Account) -> (nat) query;
  ckbtc_fee : () -> (nat) query;
  ckbtc_transfer : (nat32, principal) -> (ManualReply);
  executeTransfer : (nat32, text) -> (ManualReply_1);
  getAccountBalance : (text) -> (ManualReply_2) query;
  getAddressFromPrincipal : (principal) -> (text) query;
  getArchives : () -> (ManualReply_3) query;
  getBlocks : (GetBlocksArgs) -> (ManualReply_4) query;
  getDecimals : () -> (ManualReply_5) query;
  getName : () -> (ManualReply_6) query;
  getSymbol : () -> (ManualReply_6) query;
  getTransferFee : () -> (ManualReply_7) query;
  get_canister_binary_subaccount_from_identifier : (nat32) -> (vec nat8) query;
  get_canister_hex_subaccount_from_identifier : (nat32) -> (text) query;
  get_ckBTC_canister_id : () -> (principal) query;
  get_current_environment : () -> (text) query;
  get_icrc_canister_id : () -> (principal) query;
}